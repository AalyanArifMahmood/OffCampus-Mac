{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { DropdownMenuItemType } from '../Dropdown.types';\n/**\n * A utility class to cache size and position in cache.\n *\n * Dropdown options has non-selectable display types. It is therefore not cheap to determine\n * the total number of actual selectable options as well as the position an option is in the\n * list of options - O(n) cost for each lookup.\n *\n * Given that we potentially have to make this determination on every single render pass, this\n * cache should provide a little bit of relief.\n */\n\nvar DropdownSizePosCache =\n/** @class */\nfunction () {\n  function DropdownSizePosCache() {\n    this._size = 0;\n  }\n  /**\n   * Invalidates the cache and recalculate the size of selectable options.\n   */\n\n\n  DropdownSizePosCache.prototype.updateOptions = function (options) {\n    var displayOnlyOptionsCache = [];\n    var notSelectableOptionsCache = [];\n    var size = 0;\n\n    for (var i = 0; i < options.length; i++) {\n      var _a = options[i],\n          itemType = _a.itemType,\n          hidden = _a.hidden;\n\n      if (itemType === DropdownMenuItemType.Divider || itemType === DropdownMenuItemType.Header) {\n        displayOnlyOptionsCache.push(i);\n        notSelectableOptionsCache.push(i);\n      } else if (hidden) {\n        notSelectableOptionsCache.push(i);\n      } else {\n        size++;\n      }\n    }\n\n    this._size = size;\n    this._displayOnlyOptionsCache = displayOnlyOptionsCache;\n    this._notSelectableOptionsCache = notSelectableOptionsCache;\n    this._cachedOptions = __spreadArray([], options);\n  };\n\n  Object.defineProperty(DropdownSizePosCache.prototype, \"optionSetSize\", {\n    /**\n     * The size of all the selectable options.\n     */\n    get: function () {\n      return this._size;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DropdownSizePosCache.prototype, \"cachedOptions\", {\n    /**\n     * The chached options array.\n     */\n    get: function () {\n      return this._cachedOptions;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Returns the position of this option element relative to the full set of selectable option elements.\n   * Note: the first selectable element is position 1 in the set.\n   * @param index The raw index of the option element.\n   */\n\n  DropdownSizePosCache.prototype.positionInSet = function (index) {\n    if (index === undefined) {\n      return undefined;\n    } // we could possibly memoize this too but this should be good enough, most of the time (the expectation is that\n    // when you have a lot of options, the selectable options will heavily dominate over the non-selectable options.\n\n\n    var offset = 0;\n\n    while (index > this._notSelectableOptionsCache[offset]) {\n      offset++;\n    }\n\n    if (this._displayOnlyOptionsCache[offset] === index) {\n      throw new Error(\"Unexpected: Option at index \" + index + \" is not a selectable element.\");\n    }\n\n    if (this._notSelectableOptionsCache[offset] === index) {\n      return undefined;\n    }\n\n    return index - offset + 1;\n  };\n\n  return DropdownSizePosCache;\n}();\n\nexport { DropdownSizePosCache };","map":{"version":3,"mappings":";AAAA,SAASA,oBAAT,QAAqC,mBAArC;AAGA;;;;;;;;;;;AAUA;AAAA;AAAA;EAAA;IAIU,aAAQ,CAAR;EAqET;EAnEC;;;;;EAGOC,+CAAP,UAAqBC,OAArB,EAA+C;IAC7C,IAAMC,uBAAuB,GAAG,EAAhC;IACA,IAAMC,yBAAyB,GAAG,EAAlC;IACA,IAAIC,IAAI,GAAG,CAAX;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACK,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;MACjC,SAAuBJ,OAAO,CAACI,CAAD,CAA9B;MAAA,IAAEE,QAAQ,cAAV;MAAA,IAAYC,MAAM,YAAlB;;MAEN,IAAID,QAAQ,KAAKR,oBAAoB,CAACU,OAAlC,IAA6CF,QAAQ,KAAKR,oBAAoB,CAACW,MAAnF,EAA2F;QACzFR,uBAAuB,CAACS,IAAxB,CAA6BN,CAA7B;QACAF,yBAAyB,CAACQ,IAA1B,CAA+BN,CAA/B;MACD,CAHD,MAGO,IAAIG,MAAJ,EAAY;QACjBL,yBAAyB,CAACQ,IAA1B,CAA+BN,CAA/B;MACD,CAFM,MAEA;QACLD,IAAI;MACL;IACF;;IAED,KAAKQ,KAAL,GAAaR,IAAb;IACA,KAAKS,wBAAL,GAAgCX,uBAAhC;IACA,KAAKY,0BAAL,GAAkCX,yBAAlC;IACA,KAAKY,cAAL,GAAmBC,kBAAOf,OAAP,CAAnB;EACD,CArBM;;EA0BPgB,sBAAWjB,8BAAX,EAAW,eAAX,EAAwB;IAHxB;;;SAGA;MACE,OAAO,KAAKY,KAAZ;IACD,CAFuB;qBAAA;;EAAA,CAAxB;EAOAK,sBAAWjB,8BAAX,EAAW,eAAX,EAAwB;IAHxB;;;SAGA;MACE,OAAO,KAAKe,cAAZ;IACD,CAFuB;qBAAA;;EAAA,CAAxB;EAIA;;;;;;EAKOf,+CAAP,UAAqBkB,KAArB,EAA8C;IAC5C,IAAIA,KAAK,KAAKC,SAAd,EAAyB;MACvB,OAAOA,SAAP;IACD,CAH2C,CAK5C;IACA;;;IACA,IAAIC,MAAM,GAAG,CAAb;;IACA,OAAOF,KAAK,GAAG,KAAKJ,0BAAL,CAAgCM,MAAhC,CAAf,EAAwD;MACtDA,MAAM;IACP;;IAED,IAAI,KAAKP,wBAAL,CAA8BO,MAA9B,MAA0CF,KAA9C,EAAqD;MACnD,MAAM,IAAIG,KAAJ,CAAU,iCAA+BH,KAA/B,GAAoC,+BAA9C,CAAN;IACD;;IAED,IAAI,KAAKJ,0BAAL,CAAgCM,MAAhC,MAA4CF,KAAhD,EAAuD;MACrD,OAAOC,SAAP;IACD;;IAED,OAAOD,KAAK,GAAGE,MAAR,GAAiB,CAAxB;EACD,CArBM;;EAsBT;AAAC,CAzED","names":["DropdownMenuItemType","DropdownSizePosCache","options","displayOnlyOptionsCache","notSelectableOptionsCache","size","i","length","itemType","hidden","Divider","Header","push","_size","_displayOnlyOptionsCache","_notSelectableOptionsCache","_cachedOptions","__spreadArray","Object","index","undefined","offset","Error"],"sources":["/Users/aalyanmahmood/Documents/GitHub/OffCampus-Mac/node_modules/@fluentui/react/lib/components/Dropdown/src/components/Dropdown/utilities/DropdownSizePosCache.ts"],"sourcesContent":["import { DropdownMenuItemType } from '../Dropdown.types';\nimport type { IDropdownOption } from '../Dropdown.types';\n\n/**\n * A utility class to cache size and position in cache.\n *\n * Dropdown options has non-selectable display types. It is therefore not cheap to determine\n * the total number of actual selectable options as well as the position an option is in the\n * list of options - O(n) cost for each lookup.\n *\n * Given that we potentially have to make this determination on every single render pass, this\n * cache should provide a little bit of relief.\n */\nexport class DropdownSizePosCache {\n  private _cachedOptions: IDropdownOption[];\n  private _displayOnlyOptionsCache: number[];\n  private _notSelectableOptionsCache: number[];\n  private _size = 0;\n\n  /**\n   * Invalidates the cache and recalculate the size of selectable options.\n   */\n  public updateOptions(options: IDropdownOption[]) {\n    const displayOnlyOptionsCache = [];\n    const notSelectableOptionsCache = [];\n    let size = 0;\n    for (let i = 0; i < options.length; i++) {\n      const { itemType, hidden } = options[i];\n\n      if (itemType === DropdownMenuItemType.Divider || itemType === DropdownMenuItemType.Header) {\n        displayOnlyOptionsCache.push(i);\n        notSelectableOptionsCache.push(i);\n      } else if (hidden) {\n        notSelectableOptionsCache.push(i);\n      } else {\n        size++;\n      }\n    }\n\n    this._size = size;\n    this._displayOnlyOptionsCache = displayOnlyOptionsCache;\n    this._notSelectableOptionsCache = notSelectableOptionsCache;\n    this._cachedOptions = [...options];\n  }\n\n  /**\n   * The size of all the selectable options.\n   */\n  public get optionSetSize(): number {\n    return this._size;\n  }\n\n  /**\n   * The chached options array.\n   */\n  public get cachedOptions(): IDropdownOption[] {\n    return this._cachedOptions;\n  }\n\n  /**\n   * Returns the position of this option element relative to the full set of selectable option elements.\n   * Note: the first selectable element is position 1 in the set.\n   * @param index The raw index of the option element.\n   */\n  public positionInSet(index: number | undefined): number | undefined {\n    if (index === undefined) {\n      return undefined;\n    }\n\n    // we could possibly memoize this too but this should be good enough, most of the time (the expectation is that\n    // when you have a lot of options, the selectable options will heavily dominate over the non-selectable options.\n    let offset = 0;\n    while (index > this._notSelectableOptionsCache[offset]) {\n      offset++;\n    }\n\n    if (this._displayOnlyOptionsCache[offset] === index) {\n      throw new Error(`Unexpected: Option at index ${index} is not a selectable element.`);\n    }\n\n    if (this._notSelectableOptionsCache[offset] === index) {\n      return undefined;\n    }\n\n    return index - offset + 1;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}