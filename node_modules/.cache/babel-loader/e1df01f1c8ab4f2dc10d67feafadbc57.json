{"ast":null,"code":"import * as React from 'react';\nimport { FocusRectsContext } from './useFocusRects';\nexport var FocusRectsProvider = function (props) {\n  var providerRef = props.providerRef,\n      layerRoot = props.layerRoot;\n  var registeredProviders = React.useState([])[0];\n  var parentContext = React.useContext(FocusRectsContext); // Inherit the parent context if it exists, unless this is a layer root.\n  // This allows the topmost provider element in the DOM tree to handle the focus events.\n  // Since layers are in a separate HTML tree from their parent, they shouldn't use the parent's providerRef.\n\n  var inheritParentContext = parentContext !== undefined && !layerRoot;\n  var context = React.useMemo(function () {\n    return inheritParentContext ? undefined : {\n      providerRef: providerRef,\n      registeredProviders: registeredProviders,\n      registerProvider: function (ref) {\n        // Register this child provider with the current context, and any parent contexts\n        registeredProviders.push(ref);\n        parentContext === null || parentContext === void 0 ? void 0 : parentContext.registerProvider(ref);\n      },\n      unregisterProvider: function (ref) {\n        parentContext === null || parentContext === void 0 ? void 0 : parentContext.unregisterProvider(ref);\n        var i = registeredProviders.indexOf(ref);\n\n        if (i >= 0) {\n          registeredProviders.splice(i, 1);\n        }\n      }\n    };\n  }, [providerRef, registeredProviders, parentContext, inheritParentContext]);\n  React.useEffect(function () {\n    if (context) {\n      context.registerProvider(context.providerRef);\n      return function () {\n        return context.unregisterProvider(context.providerRef);\n      };\n    }\n  }, [context]); // Create a new context provider if this is not inheriting from the parent.\n\n  if (context) {\n    return React.createElement(FocusRectsContext.Provider, {\n      value: context\n    }, props.children);\n  } else {\n    return React.createElement(React.Fragment, null, props.children);\n  }\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AAcA,OAAO,IAAMC,kBAAkB,GAAsC,iBAAK;EAChE,eAAW,GAAgBC,KAAK,YAAhC;EAAA,IAAaC,SAAS,GAAKD,KAAK,UAAhC;EACD,uBAAmB,GAAIH,KAAK,CAACK,QAAN,CAA+C,EAA/C,EAAkD,CAAlD,CAAvB;EACP,IAAMC,aAAa,GAAGN,KAAK,CAACO,UAAN,CAAiBN,iBAAjB,CAAtB,CAHwE,CAKxE;EACA;EACA;;EACA,IAAMO,oBAAoB,GAAGF,aAAa,KAAKG,SAAlB,IAA+B,CAACL,SAA7D;EAEA,IAAMM,OAAO,GAAGV,KAAK,CAACW,OAAN,CACd;IACE,2BAAoB,GAChBF,SADgB,GAEhB;MACEG,WAAW,aADb;MAEEC,mBAAmB,qBAFrB;MAGEC,gBAAgB,EAAE,UAACC,GAAD,EAAkC;QAClD;QACAF,mBAAmB,CAACG,IAApB,CAAyBD,GAAzB;QACAT,aAAa,SAAb,iBAAa,WAAb,GAAa,MAAb,gBAAa,CAAEQ,gBAAf,CAAgCC,GAAhC;MACD,CAPH;MAQEE,kBAAkB,EAAE,UAACF,GAAD,EAAkC;QACpDT,aAAa,SAAb,iBAAa,WAAb,GAAa,MAAb,gBAAa,CAAEW,kBAAf,CAAkCF,GAAlC;QACA,IAAMG,CAAC,GAAGL,mBAAmB,CAACM,OAApB,CAA4BJ,GAA5B,CAAV;;QACA,IAAIG,CAAC,IAAI,CAAT,EAAY;UACVL,mBAAmB,CAACO,MAApB,CAA2BF,CAA3B,EAA8B,CAA9B;QACD;MACF;IAdH,CAFJ;EAiBK,CAnBO,EAoBd,CAACN,WAAD,EAAcC,mBAAd,EAAmCP,aAAnC,EAAkDE,oBAAlD,CApBc,CAAhB;EAuBAR,KAAK,CAACqB,SAAN,CAAgB;IACd,IAAIX,OAAJ,EAAa;MACXA,OAAO,CAACI,gBAAR,CAAyBJ,OAAO,CAACE,WAAjC;MACA,OAAO;QAAM,cAAO,CAACK,kBAAR,CAA2BP,OAAO,CAACE,WAAnC;MAA+C,CAA5D;IACD;EACF,CALD,EAKG,CAACF,OAAD,CALH,EAjCwE,CAwCxE;;EACA,IAAIA,OAAJ,EAAa;IACX,OAAOV,oBAACC,iBAAiB,CAACqB,QAAnB,EAA2B;MAACC,KAAK,EAAEb;IAAR,CAA3B,EAA6CP,KAAK,CAACqB,QAAnD,CAAP;EACD,CAFD,MAEO;IACL,OAAOxB,0CAAGG,KAAK,CAACqB,QAAT,CAAP;EACD;AACF,CA9CM","names":["React","FocusRectsContext","FocusRectsProvider","props","layerRoot","useState","parentContext","useContext","inheritParentContext","undefined","context","useMemo","providerRef","registeredProviders","registerProvider","ref","push","unregisterProvider","i","indexOf","splice","useEffect","Provider","value","children"],"sources":["/Users/aalyanmahmood/Documents/GitHub/OffCampus-Mac/node_modules/@fluentui/utilities/src/FocusRectsProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FocusRectsContext } from './useFocusRects';\n\nexport type FocusRectsProviderProps = {\n  /**\n   * Ref to the root element that this is providing focus rects for.\n   */\n  providerRef: React.RefObject<HTMLElement>;\n\n  /**\n   * Indicates that this is the root of a layer, and should not inherit the providerRef from a parent context.\n   */\n  layerRoot?: boolean;\n};\n\nexport const FocusRectsProvider: React.FC<FocusRectsProviderProps> = props => {\n  const { providerRef, layerRoot } = props;\n  const [registeredProviders] = React.useState<React.RefObject<HTMLElement>[]>([]);\n  const parentContext = React.useContext(FocusRectsContext);\n\n  // Inherit the parent context if it exists, unless this is a layer root.\n  // This allows the topmost provider element in the DOM tree to handle the focus events.\n  // Since layers are in a separate HTML tree from their parent, they shouldn't use the parent's providerRef.\n  const inheritParentContext = parentContext !== undefined && !layerRoot;\n\n  const context = React.useMemo(\n    () =>\n      inheritParentContext\n        ? undefined\n        : {\n            providerRef,\n            registeredProviders,\n            registerProvider: (ref: React.RefObject<HTMLElement>) => {\n              // Register this child provider with the current context, and any parent contexts\n              registeredProviders.push(ref);\n              parentContext?.registerProvider(ref);\n            },\n            unregisterProvider: (ref: React.RefObject<HTMLElement>) => {\n              parentContext?.unregisterProvider(ref);\n              const i = registeredProviders.indexOf(ref);\n              if (i >= 0) {\n                registeredProviders.splice(i, 1);\n              }\n            },\n          },\n    [providerRef, registeredProviders, parentContext, inheritParentContext],\n  );\n\n  React.useEffect(() => {\n    if (context) {\n      context.registerProvider(context.providerRef);\n      return () => context.unregisterProvider(context.providerRef);\n    }\n  }, [context]);\n\n  // Create a new context provider if this is not inheriting from the parent.\n  if (context) {\n    return <FocusRectsContext.Provider value={context}>{props.children}</FocusRectsContext.Provider>;\n  } else {\n    return <>{props.children}</>;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}