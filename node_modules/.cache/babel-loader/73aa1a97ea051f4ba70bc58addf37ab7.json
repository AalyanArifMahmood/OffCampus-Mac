{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\nvar getClassNames = classNamesFunction();\n\nvar GroupHeaderBase =\n/** @class */\nfunction (_super) {\n  __extends(GroupHeaderBase, _super);\n\n  function GroupHeaderBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._toggleCollapse = function () {\n      var _a = _this.props,\n          group = _a.group,\n          onToggleCollapse = _a.onToggleCollapse,\n          isGroupLoading = _a.isGroupLoading;\n      var isCollapsed = _this.state.isCollapsed;\n      var newCollapsed = !isCollapsed;\n      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group);\n\n      _this.setState({\n        isCollapsed: newCollapsed,\n        isLoadingVisible: newLoadingVisible\n      });\n\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n    };\n\n    _this._onKeyUp = function (ev) {\n      var _a = _this.props,\n          group = _a.group,\n          onGroupHeaderKeyUp = _a.onGroupHeaderKeyUp;\n\n      if (onGroupHeaderKeyUp) {\n        onGroupHeaderKeyUp(ev, group);\n      }\n\n      if (!ev.defaultPrevented) {\n        // eslint-disable-next-line deprecation/deprecation\n        var shouldOpen = _this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, _this.props.theme); // eslint-disable-next-line deprecation/deprecation\n\n        var shouldClose = !_this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, _this.props.theme);\n\n        if (shouldClose || shouldOpen) {\n          _this._toggleCollapse();\n\n          ev.stopPropagation();\n          ev.preventDefault();\n        }\n      }\n    };\n\n    _this._onToggleClick = function (ev) {\n      _this._toggleCollapse();\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n\n    _this._onHeaderClick = function () {\n      var _a = _this.props,\n          group = _a.group,\n          onGroupHeaderClick = _a.onGroupHeaderClick;\n\n      if (onGroupHeaderClick) {\n        onGroupHeaderClick(group);\n      }\n    };\n\n    _this._onRenderTitle = function (props) {\n      var group = props.group;\n\n      if (!group) {\n        return null;\n      }\n\n      var onRenderName = props.onRenderName ? composeRenderFunction(props.onRenderName, _this._onRenderName) : _this._onRenderName;\n      return React.createElement(\"div\", {\n        className: _this._classNames.title,\n        id: _this._id,\n        onClick: _this._onHeaderClick,\n        role: \"gridcell\",\n        \"aria-colspan\": _this.props.ariaColSpan,\n        \"data-selection-invoke\": true\n      }, onRenderName(props));\n    };\n\n    _this._onRenderName = function (props) {\n      var group = props.group;\n\n      if (!group) {\n        return null;\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"span\", null, group.name), React.createElement(\"span\", {\n        className: _this._classNames.headerCount\n      }, \"(\", group.count, group.hasMoreData && '+', \")\"));\n    };\n\n    _this._id = getId('GroupHeader');\n    _this.state = {\n      isCollapsed: _this.props.group && _this.props.group.isCollapsed,\n      isLoadingVisible: false\n    };\n    return _this;\n  }\n\n  GroupHeaderBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    if (nextProps.group) {\n      var newCollapsed = nextProps.group.isCollapsed;\n      var isGroupLoading = nextProps.isGroupLoading;\n      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n      return __assign(__assign({}, previousState), {\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false\n      });\n    }\n\n    return previousState;\n  };\n\n  GroupHeaderBase.prototype.render = function () {\n    var _a = this.props,\n        group = _a.group,\n        _b = _a.groupLevel,\n        groupLevel = _b === void 0 ? 0 : _b,\n        viewport = _a.viewport,\n        selectionMode = _a.selectionMode,\n        loadingText = _a.loadingText,\n        // eslint-disable-next-line deprecation/deprecation\n    _c = _a.isSelected,\n        // eslint-disable-next-line deprecation/deprecation\n    isSelected = _c === void 0 ? false : _c,\n        _d = _a.selected,\n        selected = _d === void 0 ? false : _d,\n        indentWidth = _a.indentWidth,\n        onRenderGroupHeaderCheckbox = _a.onRenderGroupHeaderCheckbox,\n        _e = _a.isCollapsedGroupSelectVisible,\n        isCollapsedGroupSelectVisible = _e === void 0 ? true : _e,\n        expandButtonProps = _a.expandButtonProps,\n        expandButtonIcon = _a.expandButtonIcon,\n        selectAllButtonProps = _a.selectAllButtonProps,\n        theme = _a.theme,\n        styles = _a.styles,\n        className = _a.className,\n        compact = _a.compact,\n        ariaLevel = _a.ariaLevel,\n        ariaPosInSet = _a.ariaPosInSet,\n        ariaSetSize = _a.ariaSetSize,\n        ariaRowIndex = _a.ariaRowIndex,\n        useFastIcons = _a.useFastIcons;\n    var onRenderTitle = this.props.onRenderTitle ? composeRenderFunction(this.props.onRenderTitle, this._onRenderTitle) : this._onRenderTitle;\n    var defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n    var onRenderCheckbox = onRenderGroupHeaderCheckbox ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender) : defaultCheckboxRender;\n    var _f = this.state,\n        isCollapsed = _f.isCollapsed,\n        isLoadingVisible = _f.isLoadingVisible;\n    var canSelectGroup = selectionMode === SelectionMode.multiple;\n    var isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    var currentlySelected = selected || isSelected;\n    var isRTL = getRTL(theme);\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      selected: currentlySelected,\n      isCollapsed: isCollapsed,\n      compact: compact\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: this._classNames.root,\n      style: viewport ? {\n        minWidth: viewport.width\n      } : {},\n      role: \"row\",\n      \"aria-level\": ariaLevel,\n      \"aria-setsize\": ariaSetSize,\n      \"aria-posinset\": ariaPosInSet,\n      \"aria-rowindex\": ariaRowIndex,\n      \"data-is-focusable\": true,\n      onKeyUp: this._onKeyUp,\n      \"aria-label\": group.ariaLabel,\n      \"aria-labelledby\": group.ariaLabel ? undefined : this._id,\n      \"aria-expanded\": !this.state.isCollapsed,\n      \"aria-selected\": canSelectGroup ? currentlySelected : undefined,\n      \"data-selection-index\": group.startIndex,\n      \"data-selection-span\": group.count\n    }, React.createElement(\"div\", {\n      className: this._classNames.groupHeaderContainer,\n      role: \"presentation\"\n    }, isSelectionCheckVisible ? React.createElement(\"div\", {\n      role: \"gridcell\"\n    }, React.createElement(\"button\", __assign({\n      \"data-is-focusable\": false,\n      type: \"button\",\n      className: this._classNames.check,\n      role: \"checkbox\",\n      id: this._id + \"-check\",\n      \"aria-checked\": currentlySelected,\n      \"aria-labelledby\": this._id + \"-check \" + this._id,\n      \"data-selection-toggle\": true\n    }, selectAllButtonProps), onRenderCheckbox({\n      checked: currentlySelected,\n      theme: theme\n    }, onRenderCheckbox))) : // To make the group header align properly with the column headers, this spacer\n    // needs to be the same width as the check cell in the column header.\n    selectionMode !== SelectionMode.none && React.createElement(GroupSpacer, {\n      indentWidth: CHECK_CELL_WIDTH,\n      count: 1\n    }), React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      count: groupLevel\n    }), React.createElement(\"div\", {\n      className: this._classNames.dropIcon,\n      role: \"presentation\"\n    }, React.createElement(Icon, {\n      iconName: \"Tag\"\n    })), React.createElement(\"div\", {\n      role: \"gridcell\"\n    }, React.createElement(\"button\", __assign({\n      \"data-is-focusable\": false,\n      type: \"button\",\n      className: this._classNames.expand,\n      onClick: this._onToggleClick,\n      \"aria-expanded\": !this.state.isCollapsed\n    }, expandButtonProps), React.createElement(Icon, {\n      className: this._classNames.expandIsCollapsed,\n      iconName: expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')\n    }))), onRenderTitle(this.props), isLoadingVisible && React.createElement(Spinner, {\n      label: loadingText\n    })));\n  };\n\n  GroupHeaderBase.prototype._defaultCheckboxRender = function (checkboxProps) {\n    return React.createElement(Check, {\n      checked: checkboxProps.checked\n    });\n  };\n\n  GroupHeaderBase.prototype._fastDefaultCheckboxRender = function (checkboxProps) {\n    return React.createElement(FastCheck, {\n      theme: checkboxProps.theme,\n      checked: checkboxProps.checked\n    });\n  };\n\n  GroupHeaderBase.defaultProps = {\n    expandButtonProps: {\n      'aria-label': 'expand collapse group'\n    }\n  };\n  return GroupHeaderBase;\n}(React.Component);\n\nexport { GroupHeaderBase };\nvar FastCheck = React.memo(function (props) {\n  return React.createElement(Check, {\n    theme: props.theme,\n    checked: props.checked,\n    className: props.className,\n    useFastIcons: true\n  });\n});","map":{"version":3,"mappings":"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","names":["React","composeRenderFunction","classNamesFunction","getId","getRTL","getRTLSafeKeyCode","KeyCodes","SelectionMode","Check","Icon","GroupSpacer","Spinner","CHECK_CELL_WIDTH","getClassNames","__extends","props","_super","_this","group","onToggleCollapse","isGroupLoading","state","isCollapsed","newCollapsed","newLoadingVisible","setState","isLoadingVisible","ev","onGroupHeaderKeyUp","defaultPrevented","shouldOpen","which","right","theme","shouldClose","left","_toggleCollapse","stopPropagation","preventDefault","onGroupHeaderClick","onRenderName","_onRenderName","className","_classNames","title","id","_id","onClick","_onHeaderClick","role","ariaColSpan","name","headerCount","count","hasMoreData","GroupHeaderBase","nextProps","previousState","_b","groupLevel","viewport","selectionMode","loadingText","_c","isSelected","_d","selected","indentWidth","onRenderGroupHeaderCheckbox","_e","isCollapsedGroupSelectVisible","expandButtonProps","expandButtonIcon","selectAllButtonProps","styles","compact","ariaLevel","ariaPosInSet","ariaSetSize","ariaRowIndex","useFastIcons","onRenderTitle","_onRenderTitle","defaultCheckboxRender","_fastDefaultCheckboxRender","_defaultCheckboxRender","onRenderCheckbox","canSelectGroup","multiple","isSelectionCheckVisible","currentlySelected","isRTL","root","style","minWidth","width","onKeyUp","_onKeyUp","ariaLabel","undefined","startIndex","groupHeaderContainer","type","check","checked","none","dropIcon","iconName","expand","_onToggleClick","expandIsCollapsed","label","checkboxProps","FastCheck","Component","memo"],"sources":["/Users/aalyanmahmood/Documents/GitHub/OffCampus-Mac/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupHeader.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\nimport type { IProcessedStyleSet, ITheme } from '../../Styling';\nimport type {\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles,\n  IGroupHeaderProps,\n  IGroupHeaderCheckboxProps,\n} from './GroupHeader.types';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n  private _id: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupHeaderProps,\n    previousState: IGroupHeaderState,\n  ): IGroupHeaderState {\n    if (nextProps.group) {\n      const newCollapsed = nextProps.group.isCollapsed;\n      const isGroupLoading = nextProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n\n      return {\n        ...previousState,\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      };\n    }\n\n    return previousState;\n  }\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this._id = getId('GroupHeader');\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel = 0,\n      viewport,\n      selectionMode,\n      loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderGroupHeaderCheckbox,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      expandButtonIcon,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      compact,\n      ariaLevel,\n      ariaPosInSet,\n      ariaSetSize,\n      ariaRowIndex,\n      useFastIcons,\n    } = this.props;\n\n    const onRenderTitle = this.props.onRenderTitle\n      ? composeRenderFunction(this.props.onRenderTitle, this._onRenderTitle)\n      : this._onRenderTitle;\n\n    const defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n\n    const onRenderCheckbox = onRenderGroupHeaderCheckbox\n      ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n      : defaultCheckboxRender;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        role=\"row\"\n        aria-level={ariaLevel}\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        aria-rowindex={ariaRowIndex}\n        data-is-focusable={true}\n        onKeyUp={this._onKeyUp}\n        aria-label={group.ariaLabel}\n        aria-labelledby={group.ariaLabel ? undefined : this._id}\n        aria-expanded={!this.state.isCollapsed}\n        aria-selected={canSelectGroup ? currentlySelected : undefined}\n        data-selection-index={group.startIndex}\n        data-selection-span={group.count}\n      >\n        <div className={this._classNames.groupHeaderContainer} role=\"presentation\">\n          {isSelectionCheckVisible ? (\n            <div role=\"gridcell\">\n              <button\n                data-is-focusable={false}\n                type=\"button\"\n                className={this._classNames.check}\n                role=\"checkbox\"\n                id={`${this._id}-check`}\n                aria-checked={currentlySelected}\n                aria-labelledby={`${this._id}-check ${this._id}`}\n                data-selection-toggle={true}\n                {...selectAllButtonProps}\n              >\n                {onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox)}\n              </button>\n            </div>\n          ) : (\n            // To make the group header align properly with the column headers, this spacer\n            // needs to be the same width as the check cell in the column header.\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={CHECK_CELL_WIDTH} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon} role=\"presentation\">\n            <Icon iconName=\"Tag\" />\n          </div>\n          <div role=\"gridcell\">\n            <button\n              data-is-focusable={false}\n              type=\"button\"\n              className={this._classNames.expand}\n              onClick={this._onToggleClick}\n              aria-expanded={!this.state.isCollapsed}\n              {...expandButtonProps}\n            >\n              <Icon\n                className={this._classNames.expandIsCollapsed}\n                iconName={expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')}\n              />\n            </button>\n          </div>\n\n          {onRenderTitle(this.props)}\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </div>\n      </div>\n    );\n  }\n\n  private _toggleCollapse = () => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n  };\n\n  private _onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { group, onGroupHeaderKeyUp } = this.props;\n\n    if (onGroupHeaderKeyUp) {\n      onGroupHeaderKeyUp(ev, group);\n    }\n\n    if (!ev.defaultPrevented) {\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldOpen = this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldClose = !this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, this.props.theme);\n      if (shouldClose || shouldOpen) {\n        this._toggleCollapse();\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  };\n\n  private _onToggleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._toggleCollapse();\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    }\n  };\n\n  private _defaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <Check checked={checkboxProps.checked} />;\n  }\n\n  private _fastDefaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n  }\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    const onRenderName = props.onRenderName\n      ? composeRenderFunction(props.onRenderName, this._onRenderName)\n      : this._onRenderName;\n\n    return (\n      <div\n        className={this._classNames.title}\n        id={this._id}\n        onClick={this._onHeaderClick}\n        role=\"gridcell\"\n        aria-colspan={this.props.ariaColSpan}\n        data-selection-invoke={true}\n      >\n        {onRenderName(props)}\n      </div>\n    );\n  };\n\n  private _onRenderName = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </>\n    );\n  };\n}\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n"]},"metadata":{},"sourceType":"module"}