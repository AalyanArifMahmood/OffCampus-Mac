{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, shallowCompare, getNativeProps, divProperties, composeComponentAs } from '../../Utilities';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { classNamesFunction } from '../../Utilities';\nimport { getId } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\nvar NO_COLUMNS = [];\n\nvar DetailsRowBase =\n/** @class */\nfunction (_super) {\n  __extends(DetailsRowBase, _super);\n\n  function DetailsRowBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._cellMeasurer = React.createRef();\n    _this._focusZone = React.createRef();\n\n    _this._onSelectionChanged = function () {\n      var selectionState = getSelectionState(_this.props);\n\n      if (!shallowCompare(selectionState, _this.state.selectionState)) {\n        _this.setState({\n          selectionState: selectionState\n        });\n      }\n    };\n    /**\n     * update isDropping state based on the input value, which is used to change style during drag and drop\n     *\n     * when change to true, that means drag enter. we will add default dropping class name\n     * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n     *\n     * when change to false, that means drag leave. we will remove the dropping class name from root element.\n     *\n     * @param newValue - New isDropping state value\n     * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n     */\n\n\n    _this._updateDroppingState = function (newValue, event) {\n      var isDropping = _this.state.isDropping;\n      var _a = _this.props,\n          dragDropEvents = _a.dragDropEvents,\n          item = _a.item;\n\n      if (!newValue) {\n        if (dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(item, event);\n        }\n      } else if (dragDropEvents.onDragEnter) {\n        _this._droppingClassNames = dragDropEvents.onDragEnter(item, event);\n      }\n\n      if (isDropping !== newValue) {\n        _this.setState({\n          isDropping: newValue\n        });\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._events = new EventGroup(_this);\n    _this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false\n    };\n    _this._droppingClassNames = '';\n    return _this;\n  }\n\n  DetailsRowBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    return __assign(__assign({}, previousState), {\n      selectionState: getSelectionState(nextProps)\n    });\n  };\n\n  DetailsRowBase.prototype.componentDidMount = function () {\n    var _a = this.props,\n        dragDropHelper = _a.dragDropHelper,\n        selection = _a.selection,\n        item = _a.item,\n        onDidMount = _a.onDidMount;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  };\n\n  DetailsRowBase.prototype.componentDidUpdate = function (previousProps) {\n    var state = this.state;\n    var _a = this.props,\n        item = _a.item,\n        onDidMount = _a.onDidMount;\n    var columnMeasureInfo = state.columnMeasureInfo;\n\n    if (this.props.itemIndex !== previousProps.itemIndex || this.props.item !== previousProps.item || this.props.dragDropHelper !== previousProps.dragDropHelper) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      var newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n      this.setState({\n        columnMeasureInfo: undefined\n      });\n    }\n\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  };\n\n  DetailsRowBase.prototype.componentWillUnmount = function () {\n    var _a = this.props,\n        item = _a.item,\n        onWillUnmount = _a.onWillUnmount; // Only call the onWillUnmount callback if we have an item.\n\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n\n      delete this._dragDropSubscription;\n    }\n\n    this._events.dispose();\n  };\n\n  DetailsRowBase.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    if (this.props.useReducedRowRenderer) {\n      var newSelectionState = getSelectionState(nextProps);\n\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  };\n\n  DetailsRowBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b,\n        dragDropEvents = _a.dragDropEvents,\n        item = _a.item,\n        itemIndex = _a.itemIndex,\n        id = _a.id,\n        _c = _a.flatIndexOffset,\n        flatIndexOffset = _c === void 0 ? 2 : _c,\n        _d = _a.onRenderCheck,\n        onRenderCheck = _d === void 0 ? this._onRenderCheck : _d,\n        onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox,\n        onRenderItemColumn = _a.onRenderItemColumn,\n        onRenderField = _a.onRenderField,\n        getCellValueKey = _a.getCellValueKey,\n        selectionMode = _a.selectionMode,\n        _e = _a.rowWidth,\n        rowWidth = _e === void 0 ? 0 : _e,\n        checkboxVisibility = _a.checkboxVisibility,\n        getRowAriaLabel = _a.getRowAriaLabel,\n        getRowAriaDescription = _a.getRowAriaDescription,\n        getRowAriaDescribedBy = _a.getRowAriaDescribedBy,\n        isGridRow = _a.isGridRow,\n        checkButtonAriaLabel = _a.checkButtonAriaLabel,\n        checkboxCellClassName = _a.checkboxCellClassName,\n\n    /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n    rowFieldsAs = _a.rowFieldsAs,\n        selection = _a.selection,\n        indentWidth = _a.indentWidth,\n        enableUpdateAnimations = _a.enableUpdateAnimations,\n        compact = _a.compact,\n        theme = _a.theme,\n        styles = _a.styles,\n        cellsByColumn = _a.cellsByColumn,\n        groupNestingDepth = _a.groupNestingDepth,\n        _f = _a.useFastIcons,\n        useFastIcons = _f === void 0 ? true : _f,\n        cellStyleProps = _a.cellStyleProps,\n        group = _a.group,\n        focusZoneProps = _a.focusZoneProps,\n        _g = _a.disabled,\n        disabled = _g === void 0 ? false : _g;\n    var _h = this.state,\n        columnMeasureInfo = _h.columnMeasureInfo,\n        isDropping = _h.isDropping;\n    var _j = this.state.selectionState,\n        _k = _j.isSelected,\n        isSelected = _k === void 0 ? false : _k,\n        _l = _j.isSelectionModal,\n        isSelectionModal = _l === void 0 ? false : _l;\n    var isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    var droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    var ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    var ariaRowDescription = getRowAriaDescription ? getRowAriaDescription(item) : undefined;\n    var ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    var canSelect = !!selection && selection.canSelectItem(item, itemIndex) && !disabled;\n    var isContentUnselectable = selectionMode === SelectionMode.multiple;\n    var showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    var ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n    var ariaPositionInSet = group ? itemIndex - group.startIndex + 1 : undefined;\n    var ariaSetSize = group ? group.count : undefined;\n    var focusZoneDirection = focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.horizontal;\n    this._classNames = __assign(__assign({}, this._classNames), getClassNames(styles, {\n      theme: theme,\n      isSelected: isSelected,\n      canSelect: !isContentUnselectable,\n      anySelected: isSelectionModal,\n      checkboxCellClassName: checkboxCellClassName,\n      droppingClassName: droppingClassName,\n      className: className,\n      compact: compact,\n      enableUpdateAnimations: enableUpdateAnimations,\n      cellStyleProps: cellStyleProps,\n      disabled: disabled\n    }));\n    var rowClassNames = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields\n    }; // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n\n    var RowFields = rowFieldsAs ? composeComponentAs(rowFieldsAs, DetailsRowFields) : DetailsRowFields;\n    var rowFields = React.createElement(RowFields, {\n      rowClassNames: this._rowClassNames,\n      rowHeaderId: id + \"-header\",\n      cellsByColumn: cellsByColumn,\n      columns: columns,\n      item: item,\n      itemIndex: itemIndex,\n      isSelected: isSelected,\n      columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0),\n      onRenderItemColumn: onRenderItemColumn,\n      onRenderField: onRenderField,\n      getCellValueKey: getCellValueKey,\n      enableUpdateAnimations: enableUpdateAnimations,\n      cellStyleProps: cellStyleProps\n    });\n    var defaultRole = 'row';\n    var role = this.props.role ? this.props.role : defaultRole;\n    this._ariaRowDescriptionId = getId('DetailsRow-description'); // When the user does not specify any column is a row-header in the columns props,\n    // The aria-labelledby of the checkbox does not specify {id}-header.\n\n    var hasRowHeader = columns.some(function (column) {\n      return !!column.isRowHeader;\n    });\n    var ariaLabelledby = id + \"-checkbox\" + (hasRowHeader ? \" \" + id + \"-header\" : ''); // additional props for rows within a GroupedList\n    // these are needed for treegrid row semantics, but not grid row semantics\n\n    var groupedListRowProps = isGridRow ? {} : {\n      'aria-level': groupNestingDepth && groupNestingDepth + 1 || undefined,\n      'aria-posinset': ariaPositionInSet,\n      'aria-setsize': ariaSetSize\n    };\n    return React.createElement(FocusZone, __assign({\n      \"data-is-focusable\": true\n    }, getNativeProps(this.props, divProperties), typeof isDraggable === 'boolean' ? {\n      'data-is-draggable': isDraggable,\n      draggable: isDraggable\n    } : {}, focusZoneProps, groupedListRowProps, {\n      direction: focusZoneDirection,\n      elementRef: this._root,\n      componentRef: this._focusZone,\n      role: role,\n      \"aria-label\": ariaLabel,\n      \"aria-disabled\": disabled || undefined,\n      \"aria-describedby\": ariaRowDescription ? this._ariaRowDescriptionId : ariaDescribedBy,\n      className: this._classNames.root,\n      \"data-selection-index\": itemIndex,\n      \"data-selection-touch-invoke\": true,\n      \"data-selection-disabled\": disabled || undefined,\n      \"data-item-index\": itemIndex,\n      \"aria-rowindex\": ariaPositionInSet === undefined ? itemIndex + flatIndexOffset : undefined,\n      \"data-automationid\": \"DetailsRow\",\n      style: {\n        minWidth: rowWidth\n      },\n      \"aria-selected\": ariaSelected,\n      allowFocusRoot: true\n    }), ariaRowDescription ? React.createElement(\"span\", {\n      key: \"description\",\n      role: \"presentation\",\n      hidden: true,\n      id: this._ariaRowDescriptionId\n    }, ariaRowDescription) : null, showCheckbox && React.createElement(\"div\", {\n      role: \"gridcell\",\n      \"data-selection-toggle\": true,\n      className: this._classNames.checkCell\n    }, onRenderCheck({\n      id: id ? id + \"-checkbox\" : undefined,\n      selected: isSelected,\n      selectionMode: selectionMode,\n      anySelected: isSelectionModal,\n      'aria-label': checkButtonAriaLabel,\n      'aria-labelledby': id ? ariaLabelledby : undefined,\n      canSelect: canSelect,\n      compact: compact,\n      className: this._classNames.check,\n      theme: theme,\n      isVisible: checkboxVisibility === CheckboxVisibility.always,\n      onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n      useFastIcons: useFastIcons\n    })), React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      role: \"gridcell\",\n      count: groupNestingDepth - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0)\n    }), item && rowFields, columnMeasureInfo && React.createElement(\"span\", {\n      role: \"presentation\",\n      className: css(this._classNames.cellMeasurer, this._classNames.cell),\n      ref: this._cellMeasurer\n    }, React.createElement(RowFields, {\n      rowClassNames: this._rowClassNames,\n      rowHeaderId: id + \"-header\",\n      columns: [columnMeasureInfo.column],\n      item: item,\n      itemIndex: itemIndex,\n      columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length,\n      onRenderItemColumn: onRenderItemColumn,\n      getCellValueKey: getCellValueKey\n    })), React.createElement(\"span\", {\n      role: \"checkbox\",\n      className: this._classNames.checkCover,\n      \"aria-checked\": isSelected,\n      \"data-selection-toggle\": true\n    }));\n  };\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n\n\n  DetailsRowBase.prototype.measureCell = function (index, onMeasureDone) {\n    var _a = this.props.columns,\n        columns = _a === void 0 ? NO_COLUMNS : _a;\n\n    var column = __assign({}, columns[index]);\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n    delete column.calculatedWidth;\n    this.setState({\n      columnMeasureInfo: {\n        index: index,\n        column: column,\n        onMeasureDone: onMeasureDone\n      }\n    });\n  };\n\n  DetailsRowBase.prototype.focus = function (forceIntoFirstElement) {\n    var _a;\n\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    return !!((_a = this._focusZone.current) === null || _a === void 0 ? void 0 : _a.focus(forceIntoFirstElement));\n  };\n\n  DetailsRowBase.prototype._onRenderCheck = function (props) {\n    return React.createElement(DetailsRowCheck, __assign({}, props));\n  };\n\n  DetailsRowBase.prototype._getRowDragDropOptions = function () {\n    var _a = this.props,\n        item = _a.item,\n        itemIndex = _a.itemIndex,\n        dragDropEvents = _a.dragDropEvents,\n        eventsToRegister = _a.eventsToRegister;\n    var options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: {\n        data: item,\n        index: itemIndex\n      },\n      canDrag: dragDropEvents.canDrag,\n      canDrop: dragDropEvents.canDrop,\n      onDragStart: dragDropEvents.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents.onDrop,\n      onDragEnd: dragDropEvents.onDragEnd,\n      onDragOver: dragDropEvents.onDragOver\n    };\n    return options;\n  };\n\n  return DetailsRowBase;\n}(React.Component);\n\nexport { DetailsRowBase };\n\nfunction getSelectionState(props) {\n  var _a;\n\n  var itemIndex = props.itemIndex,\n      selection = props.selection;\n  return {\n    isSelected: !!(selection === null || selection === void 0 ? void 0 : selection.isIndexSelected(itemIndex)),\n    isSelectionModal: !!((_a = selection === null || selection === void 0 ? void 0 : selection.isModal) === null || _a === void 0 ? void 0 : _a.call(selection))\n  };\n}","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","EventGroup","css","shallowCompare","getNativeProps","divProperties","composeComponentAs","CheckboxVisibility","DetailsRowCheck","GroupSpacer","DetailsRowFields","FocusZone","FocusZoneDirection","SelectionMode","SELECTION_CHANGE","CollapseAllVisibility","classNamesFunction","getId","getClassNames","DEFAULT_DROPPING_CSS_CLASS","NO_COLUMNS","__extends","props","_super","_this","createRef","selectionState","getSelectionState","state","setState","newValue","event","isDropping","dragDropEvents","item","onDragLeave","onDragEnter","_droppingClassNames","_events","columnMeasureInfo","undefined","DetailsRowBase","nextProps","previousState","dragDropHelper","selection","onDidMount","_root","current","_dragDropSubscription","subscribe","_getRowDragDropOptions","on","_onSelectionChanged","_onDidMountCalled","previousProps","itemIndex","dispose","index","_cellMeasurer","newWidth","getBoundingClientRect","width","onMeasureDone","onWillUnmount","nextState","useReducedRowRenderer","newSelectionState","isSelected","className","_b","columns","id","_c","flatIndexOffset","_d","onRenderCheck","_onRenderCheck","onRenderDetailsCheckbox","onRenderItemColumn","onRenderField","getCellValueKey","selectionMode","_e","rowWidth","checkboxVisibility","getRowAriaLabel","getRowAriaDescription","getRowAriaDescribedBy","isGridRow","checkButtonAriaLabel","checkboxCellClassName","rowFieldsAs","indentWidth","enableUpdateAnimations","compact","theme","styles","cellsByColumn","groupNestingDepth","_f","useFastIcons","cellStyleProps","group","focusZoneProps","_g","disabled","_k","_l","isSelectionModal","isDraggable","canDrag","droppingClassName","ariaLabel","ariaRowDescription","ariaDescribedBy","canSelect","canSelectItem","isContentUnselectable","multiple","showCheckbox","none","hidden","ariaSelected","ariaPositionInSet","startIndex","ariaSetSize","count","focusZoneDirection","direction","horizontal","_classNames","__assign","anySelected","rowClassNames","isMultiline","isRowHeader","cell","cellAnimation","cellPadded","cellUnpadded","fields","_rowClassNames","RowFields","rowFields","rowHeaderId","columnStartIndex","defaultRole","role","_ariaRowDescriptionId","hasRowHeader","some","column","ariaLabelledby","groupedListRowProps","draggable","elementRef","componentRef","_focusZone","root","style","minWidth","allowFocusRoot","key","checkCell","selected","check","isVisible","always","collapseAllVisibility","cellMeasurer","ref","length","checkCover","_a","maxWidth","calculatedWidth","forceIntoFirstElement","focus","eventsToRegister","options","eventMap","selectionIndex","context","data","canDrop","onDragStart","updateDropState","_updateDroppingState","onDrop","onDragEnd","onDragOver","Component","isIndexSelected","isModal"],"sources":["/Users/aalyanmahmood/Documents/GitHub/OffCampus-Mac/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsRow.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  css,\n  shallowCompare,\n  getNativeProps,\n  divProperties,\n  composeComponentAs,\n} from '../../Utilities';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { classNamesFunction } from '../../Utilities';\nimport type { IDisposable } from '../../Utilities';\nimport type { IColumn } from './DetailsList.types';\nimport type { IFocusZone } from '../../FocusZone';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type { IDetailsRowBaseProps, IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport type { IDetailsRowCheckProps } from './DetailsRowCheck.types';\nimport type { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport { getId } from '../../Utilities';\n\nconst getClassNames = classNamesFunction<IDetailsRowStyleProps, IDetailsRowStyles>();\n\nexport interface IDetailsRowSelectionState {\n  isSelected: boolean;\n  isSelectionModal: boolean;\n}\n\nexport interface IDetailsRowState {\n  selectionState: IDetailsRowSelectionState;\n  columnMeasureInfo?: {\n    index: number;\n    column: IColumn;\n    onMeasureDone: (measuredWidth: number) => void;\n  };\n  isDropping?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsRowBase extends React.Component<IDetailsRowBaseProps, IDetailsRowState> {\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLElement>();\n  private _cellMeasurer = React.createRef<HTMLSpanElement>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _droppingClassNames: string;\n  /** Whether this.props.onDidMount has been called */\n  private _onDidMountCalled: boolean;\n  private _dragDropSubscription?: IDisposable;\n\n  private _classNames: IProcessedStyleSet<IDetailsRowStyles>;\n  private _rowClassNames: IDetailsRowFieldsProps['rowClassNames'];\n  private _ariaRowDescriptionId: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsRowBaseProps,\n    previousState: IDetailsRowState,\n  ): IDetailsRowState {\n    return {\n      ...previousState,\n      selectionState: getSelectionState(nextProps),\n    };\n  }\n\n  constructor(props: IDetailsRowBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false,\n    };\n\n    this._droppingClassNames = '';\n  }\n  public componentDidMount(): void {\n    const { dragDropHelper, selection, item, onDidMount } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getRowDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IDetailsRowBaseProps) {\n    const state = this.state;\n    const { item, onDidMount } = this.props;\n    const { columnMeasureInfo } = state;\n\n    if (\n      this.props.itemIndex !== previousProps.itemIndex ||\n      this.props.item !== previousProps.item ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getRowDragDropOptions(),\n        );\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      const newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n\n      this.setState({\n        columnMeasureInfo: undefined,\n      });\n    }\n\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { item, onWillUnmount } = this.props;\n\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n\n    this._events.dispose();\n  }\n\n  public shouldComponentUpdate(nextProps: IDetailsRowBaseProps, nextState: IDetailsRowState): boolean {\n    if (this.props.useReducedRowRenderer) {\n      const newSelectionState = getSelectionState(nextProps);\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      columns = NO_COLUMNS,\n      dragDropEvents,\n      item,\n      itemIndex,\n      id,\n      flatIndexOffset = 2,\n      onRenderCheck = this._onRenderCheck,\n      onRenderDetailsCheckbox,\n      onRenderItemColumn,\n      onRenderField,\n      getCellValueKey,\n      selectionMode,\n      rowWidth = 0,\n      checkboxVisibility,\n      getRowAriaLabel,\n      getRowAriaDescription,\n      getRowAriaDescribedBy,\n      isGridRow,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n      rowFieldsAs,\n      selection,\n      indentWidth,\n      enableUpdateAnimations,\n      compact,\n      theme,\n      styles,\n      cellsByColumn,\n      groupNestingDepth,\n      useFastIcons = true,\n      cellStyleProps,\n      group,\n      focusZoneProps,\n      disabled = false,\n    } = this.props;\n    const { columnMeasureInfo, isDropping } = this.state;\n    const { isSelected = false, isSelectionModal = false } = this.state.selectionState;\n    const isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    const droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    const ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    const ariaRowDescription = getRowAriaDescription ? getRowAriaDescription(item) : undefined;\n    const ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    const canSelect = !!selection && selection.canSelectItem(item, itemIndex) && !disabled;\n    const isContentUnselectable = selectionMode === SelectionMode.multiple;\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    const ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n    const ariaPositionInSet = group ? itemIndex - group.startIndex + 1 : undefined;\n    const ariaSetSize = group ? group.count : undefined;\n    const focusZoneDirection = focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.horizontal;\n\n    this._classNames = {\n      ...this._classNames,\n      ...getClassNames(styles, {\n        theme: theme!,\n        isSelected,\n        canSelect: !isContentUnselectable,\n        anySelected: isSelectionModal,\n        checkboxCellClassName,\n        droppingClassName,\n        className,\n        compact,\n        enableUpdateAnimations,\n        cellStyleProps,\n        disabled,\n      }),\n    };\n\n    const rowClassNames: IDetailsRowFieldsProps['rowClassNames'] = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields,\n    };\n\n    // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n\n    const RowFields = rowFieldsAs ? composeComponentAs(rowFieldsAs, DetailsRowFields) : DetailsRowFields;\n\n    const rowFields = (\n      <RowFields\n        rowClassNames={this._rowClassNames}\n        rowHeaderId={`${id}-header`}\n        cellsByColumn={cellsByColumn}\n        columns={columns}\n        item={item}\n        itemIndex={itemIndex}\n        isSelected={isSelected}\n        columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0)}\n        onRenderItemColumn={onRenderItemColumn}\n        onRenderField={onRenderField}\n        getCellValueKey={getCellValueKey}\n        enableUpdateAnimations={enableUpdateAnimations}\n        cellStyleProps={cellStyleProps}\n      />\n    );\n\n    const defaultRole = 'row';\n    const role = this.props.role ? this.props.role : defaultRole;\n    this._ariaRowDescriptionId = getId('DetailsRow-description');\n\n    // When the user does not specify any column is a row-header in the columns props,\n    // The aria-labelledby of the checkbox does not specify {id}-header.\n    const hasRowHeader = columns.some(column => {\n      return !!column.isRowHeader;\n    });\n    const ariaLabelledby = `${id}-checkbox` + (hasRowHeader ? ` ${id}-header` : '');\n\n    // additional props for rows within a GroupedList\n    // these are needed for treegrid row semantics, but not grid row semantics\n    const groupedListRowProps = isGridRow\n      ? {}\n      : {\n          'aria-level': (groupNestingDepth && groupNestingDepth + 1) || undefined,\n          'aria-posinset': ariaPositionInSet,\n          'aria-setsize': ariaSetSize,\n        };\n\n    return (\n      <FocusZone\n        data-is-focusable={true}\n        {...getNativeProps(this.props, divProperties)}\n        {...(typeof isDraggable === 'boolean'\n          ? {\n              'data-is-draggable': isDraggable, // This data attribute is used by some host applications.\n              draggable: isDraggable,\n            }\n          : {})}\n        {...focusZoneProps}\n        {...groupedListRowProps}\n        direction={focusZoneDirection}\n        elementRef={this._root}\n        componentRef={this._focusZone}\n        role={role}\n        aria-label={ariaLabel}\n        aria-disabled={disabled || undefined}\n        aria-describedby={ariaRowDescription ? this._ariaRowDescriptionId : ariaDescribedBy}\n        className={this._classNames.root}\n        data-selection-index={itemIndex}\n        data-selection-touch-invoke={true}\n        data-selection-disabled={disabled || undefined}\n        data-item-index={itemIndex}\n        aria-rowindex={ariaPositionInSet === undefined ? itemIndex + flatIndexOffset : undefined}\n        data-automationid=\"DetailsRow\"\n        style={{ minWidth: rowWidth }}\n        aria-selected={ariaSelected}\n        allowFocusRoot={true}\n      >\n        {ariaRowDescription ? (\n          <span key=\"description\" role=\"presentation\" hidden={true} id={this._ariaRowDescriptionId}>\n            {ariaRowDescription}\n          </span>\n        ) : null}\n        {showCheckbox && (\n          <div role=\"gridcell\" data-selection-toggle={true} className={this._classNames.checkCell}>\n            {onRenderCheck({\n              id: id ? `${id}-checkbox` : undefined,\n              selected: isSelected,\n              selectionMode,\n              anySelected: isSelectionModal,\n              'aria-label': checkButtonAriaLabel,\n              'aria-labelledby': id ? ariaLabelledby : undefined,\n              canSelect,\n              compact,\n              className: this._classNames.check,\n              theme,\n              isVisible: checkboxVisibility === CheckboxVisibility.always,\n              onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n              useFastIcons,\n            })}\n          </div>\n        )}\n\n        <GroupSpacer\n          indentWidth={indentWidth}\n          role=\"gridcell\"\n          count={groupNestingDepth! - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0)}\n        />\n\n        {item && rowFields}\n        {columnMeasureInfo && (\n          <span\n            role=\"presentation\"\n            className={css(this._classNames.cellMeasurer, this._classNames.cell)}\n            ref={this._cellMeasurer}\n          >\n            <RowFields\n              rowClassNames={this._rowClassNames}\n              rowHeaderId={`${id}-header`}\n              columns={[columnMeasureInfo.column]}\n              item={item}\n              itemIndex={itemIndex}\n              columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length}\n              onRenderItemColumn={onRenderItemColumn}\n              getCellValueKey={getCellValueKey}\n            />\n          </span>\n        )}\n\n        <span\n          role=\"checkbox\"\n          className={this._classNames.checkCover}\n          aria-checked={isSelected}\n          data-selection-toggle={true}\n        />\n      </FocusZone>\n    );\n  }\n\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n  public measureCell(index: number, onMeasureDone: (width: number) => void): void {\n    const { columns = NO_COLUMNS } = this.props;\n    const column: IColumn = { ...columns[index] };\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n\n    delete column.calculatedWidth;\n\n    this.setState({\n      columnMeasureInfo: {\n        index,\n        column,\n        onMeasureDone,\n      },\n    });\n  }\n\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    return !!this._focusZone.current?.focus(forceIntoFirstElement);\n  }\n\n  protected _onRenderCheck(props: IDetailsRowCheckProps) {\n    return <DetailsRowCheck {...props} />;\n  }\n\n  private _onSelectionChanged = (): void => {\n    const selectionState = getSelectionState(this.props);\n\n    if (!shallowCompare(selectionState, this.state.selectionState)) {\n      this.setState({\n        selectionState: selectionState,\n      });\n    }\n  };\n\n  private _getRowDragDropOptions(): IDragDropOptions {\n    const { item, itemIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: { data: item, index: itemIndex },\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents!.onDrop,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n\n    return options;\n  }\n\n  /**\n   * update isDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * when change to true, that means drag enter. we will add default dropping class name\n   * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n   *\n   * when change to false, that means drag leave. we will remove the dropping class name from root element.\n   *\n   * @param newValue - New isDropping state value\n   * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, item } = this.props;\n\n    if (!newValue) {\n      if (dragDropEvents!.onDragLeave) {\n        dragDropEvents!.onDragLeave(item, event);\n      }\n    } else if (dragDropEvents!.onDragEnter) {\n      this._droppingClassNames = dragDropEvents!.onDragEnter(item, event);\n    }\n\n    if (isDropping !== newValue) {\n      this.setState({ isDropping: newValue });\n    }\n  };\n}\n\nfunction getSelectionState(props: IDetailsRowBaseProps): IDetailsRowSelectionState {\n  const { itemIndex, selection } = props;\n\n  return {\n    isSelected: !!selection?.isIndexSelected(itemIndex),\n    isSelectionModal: !!selection?.isModal?.(),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}