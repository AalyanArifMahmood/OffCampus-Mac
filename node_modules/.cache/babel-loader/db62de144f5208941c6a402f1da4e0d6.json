{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\nimport { useSetTimeout, useConst } from '@fluentui/react-hooks';\nvar TRANSITION_ANIMATION_INTERVAL = 200;\n/* ms */\n\nvar COMPONENT_NAME = 'Shimmer';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory Shimmer}\n */\n\nexport var ShimmerBase = React.forwardRef(function (props, ref) {\n  var styles = props.styles,\n      shimmerElements = props.shimmerElements,\n      children = props.children,\n      width = props.width,\n      className = props.className,\n      customElementsGroup = props.customElementsGroup,\n      theme = props.theme,\n      ariaLabel = props.ariaLabel,\n      shimmerColors = props.shimmerColors,\n      _a = props.isDataLoaded,\n      isDataLoaded = _a === void 0 ? false : _a,\n      improveCSSPerformance = props.improveCSSPerformance;\n  var divProps = getNativeProps(props, divProperties);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    isDataLoaded: isDataLoaded,\n    className: className,\n    transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n    shimmerColor: shimmerColors && shimmerColors.shimmer,\n    shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave,\n    improveCSSPerformance: improveCSSPerformance || !customElementsGroup\n  });\n  var internalState = useConst({\n    lastTimeoutId: 0\n  });\n\n  var _b = useSetTimeout(),\n      setTimeout = _b.setTimeout,\n      clearTimeout = _b.clearTimeout;\n  /**\n   * Flag for knowing when to remove the shimmerWrapper from the DOM.\n   */\n\n\n  var _c = React.useState(isDataLoaded),\n      contentLoaded = _c[0],\n      setContentLoaded = _c[1];\n\n  var divStyleProp = {\n    width: width ? width : '100%'\n  };\n  React.useEffect(function () {\n    if (isDataLoaded !== contentLoaded) {\n      if (isDataLoaded) {\n        internalState.lastTimeoutId = setTimeout(function () {\n          setContentLoaded(true);\n        }, TRANSITION_ANIMATION_INTERVAL);\n        return function () {\n          return clearTimeout(internalState.lastTimeoutId);\n        };\n      } else {\n        setContentLoaded(false);\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only run when isDataLoaded changes.\n\n  }, [isDataLoaded]);\n  return React.createElement(\"div\", __assign({}, divProps, {\n    className: classNames.root,\n    ref: ref\n  }), !contentLoaded && React.createElement(\"div\", {\n    style: divStyleProp,\n    className: classNames.shimmerWrapper\n  }, React.createElement(\"div\", {\n    className: classNames.shimmerGradient\n  }), customElementsGroup ? customElementsGroup : React.createElement(ShimmerElementsGroup, {\n    shimmerElements: shimmerElements,\n    backgroundColor: shimmerColors && shimmerColors.background\n  })), children && React.createElement(\"div\", {\n    className: classNames.dataWrapper\n  }, children), ariaLabel && !isDataLoaded && React.createElement(\"div\", {\n    role: \"status\",\n    \"aria-live\": \"polite\"\n  }, React.createElement(DelayedRender, null, React.createElement(\"div\", {\n    className: classNames.screenReaderText\n  }, ariaLabel))));\n});\nShimmerBase.displayName = COMPONENT_NAME;","map":{"version":3,"mappings":"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","names":["React","classNamesFunction","DelayedRender","getNativeProps","divProperties","ShimmerElementsGroup","useSetTimeout","useConst","TRANSITION_ANIMATION_INTERVAL","COMPONENT_NAME","getClassNames","ShimmerBase","forwardRef","props","ref","shimmerElements","children","width","className","customElementsGroup","theme","ariaLabel","shimmerColors","_a","isDataLoaded","improveCSSPerformance","divProps","classNames","styles","transitionAnimationInterval","shimmerColor","shimmer","shimmerWaveColor","shimmerWave","internalState","lastTimeoutId","setTimeout","clearTimeout","useState","contentLoaded","setContentLoaded","divStyleProp","useEffect","root","style","shimmerWrapper","shimmerGradient","backgroundColor","background","dataWrapper","role","screenReaderText","displayName"],"sources":["/Users/aalyanmahmood/Documents/GitHub/OffCampus-Mac/node_modules/@fluentui/react/lib/components/src/components/Shimmer/Shimmer.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\nimport { useSetTimeout, useConst } from '@fluentui/react-hooks';\nimport type { IShimmerProps, IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\n\nconst TRANSITION_ANIMATION_INTERVAL = 200; /* ms */\nconst COMPONENT_NAME = 'Shimmer';\n\nconst getClassNames = classNamesFunction<IShimmerStyleProps, IShimmerStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerBase: React.FunctionComponent<IShimmerProps> = React.forwardRef<HTMLDivElement, IShimmerProps>(\n  (props, ref) => {\n    const {\n      styles,\n      shimmerElements,\n      children,\n      width,\n      className,\n      customElementsGroup,\n      theme,\n      ariaLabel,\n      shimmerColors,\n      isDataLoaded = false,\n      improveCSSPerformance,\n    } = props;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties);\n\n    const classNames: { [key in keyof IShimmerStyles]: string } = getClassNames(styles!, {\n      theme: theme!,\n      isDataLoaded,\n      className,\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n      shimmerColor: shimmerColors && shimmerColors.shimmer,\n      shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave,\n      improveCSSPerformance: improveCSSPerformance || !customElementsGroup,\n    });\n\n    const internalState = useConst({\n      lastTimeoutId: 0,\n    });\n\n    const { setTimeout, clearTimeout } = useSetTimeout();\n\n    /**\n     * Flag for knowing when to remove the shimmerWrapper from the DOM.\n     */\n    const [contentLoaded, setContentLoaded] = React.useState(isDataLoaded);\n\n    const divStyleProp = { width: width ? width : '100%' };\n\n    React.useEffect(() => {\n      if (isDataLoaded !== contentLoaded) {\n        if (isDataLoaded) {\n          internalState.lastTimeoutId = setTimeout(() => {\n            setContentLoaded(true);\n          }, TRANSITION_ANIMATION_INTERVAL);\n\n          return () => clearTimeout(internalState.lastTimeoutId);\n        } else {\n          setContentLoaded(false);\n        }\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only run when isDataLoaded changes.\n    }, [isDataLoaded]);\n\n    return (\n      <div {...divProps} className={classNames.root} ref={ref}>\n        {!contentLoaded && (\n          <div style={divStyleProp} className={classNames.shimmerWrapper}>\n            <div className={classNames.shimmerGradient} />\n            {customElementsGroup ? (\n              customElementsGroup\n            ) : (\n              <ShimmerElementsGroup\n                shimmerElements={shimmerElements}\n                backgroundColor={shimmerColors && shimmerColors.background}\n              />\n            )}\n          </div>\n        )}\n        {children && <div className={classNames.dataWrapper}>{children}</div>}\n        {ariaLabel && !isDataLoaded && (\n          <div role=\"status\" aria-live=\"polite\">\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{ariaLabel}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\nShimmerBase.displayName = COMPONENT_NAME;\n"]},"metadata":{},"sourceType":"module"}